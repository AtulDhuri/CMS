{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.authStatusSubject = new BehaviorSubject(false);\n      this.authStatus$ = this.authStatusSubject.asObservable();\n      this.accessTokenKey = 'access_token';\n      this.refreshTokenKey = 'refresh_token';\n      this.apiUrl = environment.apiUrl;\n      console.log('AuthService initialized with API URL:', this.apiUrl);\n      this.updateAuthStatus();\n    }\n    get loginUrl() {\n      return `${this.apiUrl}/auth/login`;\n    }\n    get registerUrl() {\n      return `${this.apiUrl}/user`;\n    }\n    get refreshUrl() {\n      return `${this.apiUrl}/auth/refresh`;\n    }\n    get userDetailsUrl() {\n      return `${this.apiUrl}/user/me`;\n    }\n    login(payload) {\n      console.log('Login request to:', this.loginUrl);\n      return this.http.post(this.loginUrl, payload).pipe(tap(res => {\n        this.setTokens(res.accessToken, res.refreshToken);\n        this.authStatusSubject.next(true);\n      }));\n    }\n    register(payload) {\n      console.log('Register request to:', this.registerUrl);\n      return this.http.post(this.registerUrl, payload);\n    }\n    getToken() {\n      return localStorage.getItem(this.accessTokenKey);\n    }\n    getRefreshToken() {\n      return localStorage.getItem(this.refreshTokenKey);\n    }\n    refreshToken() {\n      const refreshToken = this.getRefreshToken();\n      console.log('Refresh token request to:', this.refreshUrl);\n      return this.http.post(this.refreshUrl, {\n        refreshToken\n      }).pipe(tap(res => {\n        this.setTokens(res.accessToken, res.refreshToken);\n      }));\n    }\n    logout() {\n      localStorage.removeItem(this.accessTokenKey);\n      localStorage.removeItem(this.refreshTokenKey);\n      this.authStatusSubject.next(false);\n    }\n    setTokens(accessToken, refreshToken) {\n      if (accessToken) {\n        localStorage.setItem(this.accessTokenKey, accessToken);\n      }\n      if (refreshToken) {\n        localStorage.setItem(this.refreshTokenKey, refreshToken);\n      }\n    }\n    getUserDetails() {\n      const token = this.getToken();\n      if (!token) return of(null);\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.get(this.userDetailsUrl, {\n        headers\n      }).pipe(catchError(() => of(null)));\n    }\n    updateAuthStatus() {\n      const isAuthenticated = this.hasValidToken();\n      this.authStatusSubject.next(isAuthenticated);\n      console.log('Auth status updated:', isAuthenticated);\n    }\n    hasValidToken() {\n      const token = this.getToken();\n      return !!token;\n    }\n    isAuthenticated() {\n      return this.hasValidToken();\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["HttpHeaders","of","tap","catchError","environment","BehaviorSubject","AuthService","constructor","http","authStatusSubject","authStatus$","asObservable","accessTokenKey","refreshTokenKey","apiUrl","console","log","updateAuthStatus","loginUrl","registerUrl","refreshUrl","userDetailsUrl","login","payload","post","pipe","res","setTokens","accessToken","refreshToken","next","register","getToken","localStorage","getItem","getRefreshToken","logout","removeItem","setItem","getUserDetails","token","headers","get","isAuthenticated","hasValidToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Atul\\SurveyPopupIntegration\\surveyPopupFE\\CMS\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport { environment } from '../environments/environment';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface LoginPayload {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterPayload {\r\n  username: string;\r\n  password: string;\r\n  email: string;\r\n  mobile: string;\r\n  role: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  private readonly apiUrl: string;\r\n  private authStatusSubject = new BehaviorSubject<boolean>(false);\r\n  public authStatus$ = this.authStatusSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.apiUrl = environment.apiUrl;\r\n    console.log('AuthService initialized with API URL:', this.apiUrl);\r\n    this.updateAuthStatus();\r\n  }\r\n\r\n  get loginUrl(): string {\r\n    return `${this.apiUrl}/auth/login`;\r\n  }\r\n\r\n  get registerUrl(): string {\r\n    return `${this.apiUrl}/user`;\r\n  }\r\n\r\n  get refreshUrl(): string {\r\n    return `${this.apiUrl}/auth/refresh`;\r\n  }\r\n\r\n  get userDetailsUrl(): string {\r\n    return `${this.apiUrl}/user/me`;\r\n  }\r\n\r\n  private accessTokenKey = 'access_token';\r\n  private refreshTokenKey = 'refresh_token';\r\n\r\n  login(payload: LoginPayload): Observable<any> {\r\n    console.log('Login request to:', this.loginUrl);\r\n    return this.http.post(this.loginUrl, payload).pipe(\r\n      tap((res: any) => {\r\n        this.setTokens(res.accessToken, res.refreshToken);\r\n        this.authStatusSubject.next(true);\r\n      })\r\n    );\r\n  }\r\n\r\n  register(payload: RegisterPayload): Observable<any> {\r\n    console.log('Register request to:', this.registerUrl);\r\n    return this.http.post(this.registerUrl, payload);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.accessTokenKey);\r\n  }\r\n\r\n  getRefreshToken(): string | null {\r\n    return localStorage.getItem(this.refreshTokenKey);\r\n  }\r\n\r\n  refreshToken(): Observable<any> {\r\n    const refreshToken = this.getRefreshToken();\r\n    console.log('Refresh token request to:', this.refreshUrl);\r\n    return this.http.post(this.refreshUrl, { refreshToken }).pipe(\r\n      tap((res: any) => {\r\n        this.setTokens(res.accessToken, res.refreshToken);\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.accessTokenKey);\r\n    localStorage.removeItem(this.refreshTokenKey);\r\n    this.authStatusSubject.next(false);\r\n  }\r\n\r\n  private setTokens(accessToken: string, refreshToken: string): void {\r\n    if (accessToken) {\r\n      localStorage.setItem(this.accessTokenKey, accessToken);\r\n    }\r\n    if (refreshToken) {\r\n      localStorage.setItem(this.refreshTokenKey, refreshToken);\r\n    }\r\n  }\r\n\r\n  getUserDetails(): Observable<any> {\r\n    const token = this.getToken();\r\n    if (!token) return of(null);\r\n    const headers = new HttpHeaders({ 'Authorization': `Bearer ${token}` });\r\n    return this.http.get(this.userDetailsUrl, { headers }).pipe(\r\n      catchError(() => of(null))\r\n    );\r\n  }\r\n\r\n  private updateAuthStatus(): void {\r\n    const isAuthenticated = this.hasValidToken();\r\n    this.authStatusSubject.next(isAuthenticated);\r\n    console.log('Auth status updated:', isAuthenticated);\r\n  }\r\n\r\n  private hasValidToken(): boolean {\r\n    const token = this.getToken();\r\n    return !!token;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.hasValidToken();\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}